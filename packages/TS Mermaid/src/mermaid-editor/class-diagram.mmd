---
title: Bank example
---
classDiagram
	direction TB

    class BankAccount["Banck Account"]
    BankAccount : +String owner
    BankAccount : +Bigdecimal balance
    BankAccount : +deposit(amount)
    BankAccount : +withdrawal(amount) int

	namespace BankingNamespace {
		class Bank {
			+String name
		}

		class BankAccount["Banck Account"] {
			+String owner
			+BigDecimal balance
			+deposit(amount)
			+withdrawal(amount) int
		}
	}

	class Square~Shape~{
	    int id
	    List~int~ position
	    setPoints(List~int~ points)
	    getPoints() List~int~
	}

	Square : -List~string~ messages
	Square : +setMessages(List~string~ messages)
	Square : +getMessages() List~string~
	Square : +getDistanceMatrix() List~List~int~~

	class Visibility {
		+int publicAttribute
		-int privateAttribute
		#int protectedAttribute
		+int staticAttribute$

		~package()
		+someAbstractMethod() int*
		someStaticMethod()$
	}

	classA --|> classB : Inheritance
	classC --* classD : Composition
	classE --o classF : Aggregation
	classG --> classH : Association
	classI -- classJ : Link(Solid)
	classK ..> classL : Dependency
	classM ..|> classN : Realization
	classO .. classP : Link(Dashed)

	bar ()-- foo

	class Shape
	<<interface>> Shape
	Shape : noOfVertices
	Shape : draw()
	class Color {
		<<enumeration>>
		RED
		BLUE
		GREEN
		WHITE
		BLACK
	}
	class Service {
		<<service>>
	}
	class Abstract {
		<<abstract>>
	}

	note "This is a general note"
    note for Abstract "This is a note for a class"